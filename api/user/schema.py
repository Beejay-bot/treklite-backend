import graphene
from graphene_sqlalchemy import (SQLAlchemyObjectType)
from graphql import GraphQLError

from api.user.models import User as UserModel
from utilities.validations import verify_email
from helpers.auth.error_handler import SaveContextManager
from utilities.utility import update_entity_fields
# decorators
from helpers.auth.auth import login_required


class User(SQLAlchemyObjectType):
    """
        Autogenerated return type of a user
    """
    class Meta:
        model = UserModel


class CreateUser(graphene.Mutation):
    """
        Mutation to create a user
    """
    class Arguments:
        email = graphene.String(required=False)
        fullname = graphene.String(required=True)
        profile_photo = graphene.String(required=False)

    token = graphene.String()
    user = graphene.Field(User)

    def mutate(self, info, **kwargs):
        query_user = User.get_query(info)
        existing_user = query_user.filter_by(email=kwargs['email']).first()

        if existing_user:
            token = existing_user.generate_token()
            return CreateUser(user=existing_user, token=token)
        user = UserModel(**kwargs)
        if user.email and not verify_email(user.email):
            raise GraphQLError("This email is not allowed")
        payload = {
            'model': UserModel, 'field': 'email', 'value':  kwargs['email'], # noqa
        }
        with SaveContextManager(user, 'email', payload):
            token = user.generate_token()
            return CreateUser(user=user, token=token)


class UpdateProfile(graphene.Mutation):
    """
        Mutation to update a user's profile
    """
    class Arguments:
        user_id = graphene.Int(required=True)
        email = graphene.String(required=False)
        fullname = graphene.String(required=False)
        phone = graphene.String(required=False)
        profile_photo = graphene.String(required=False)

    user = graphene.Field(User)

    @login_required
    def mutate(self, info, **kwargs):
        query = User.get_query(info)
        user = query.filter_by(id=kwargs['user_id']).first()
        if not user:
            return GraphQLError("User not found")
        update_entity_fields(user, **kwargs)
        user.save()
        return UpdateProfile(user=user)

class Query(graphene.ObjectType):
    user_by_id = graphene.Field(
        User,
        user_id=graphene.Int(),
        description="Rrturns a user's profile and accepts the argument\
        \n- user_id: the Id of the user to fetch")

    @login_required
    def resolve_user_by_id(self, info, **kwargs):
        query = User.get_query(info)
        user = query.filter_by(id=kwargs['user_id']).first()
        if not user:
            return GraphQLError("User not found")
        return user


class Mutation(graphene.ObjectType):
    """
        Mutation to create user
    """
    create_user = CreateUser.Field(
        description="Creates a new user with the arguments\
            \n- email: email field of the user\
            \n- fullname: users full name[required]\
            \n- instagram_following: users instagram following count\
            \n- instagram_followers: users instagram followers count\
            \n- profile_photo: the user's profile photo")
    update_user_profile = UpdateProfile.Field(
        description="Updates a user profile with the arguments\
            \n- email: email field of the user\
            \n- fullname: users full name[required]\
            \n- instagram_following: users instagram following count\
            \n- instagram_followers: users instagram followers count\
            \n- profile_photo: the user's profile photo")
    