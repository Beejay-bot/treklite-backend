import graphene
from graphene_sqlalchemy import (SQLAlchemyObjectType)
from api.trip.models import Trip as TripModel
from graphql import GraphQLError
from helpers.auth.auth import login_required, return_logged_in_users_id

class Trip(SQLAlchemyObjectType):
    """
        Autogenerated return type of a trip
    """
    class Meta:
        model = TripModel


class CreateTrip(graphene.Mutation):
    """
        Mutation to create a trip
    """

    class Arguments:
        estimated_time = graphene.String(required=True)
        distance = graphene.Float(required=True)
        start_address =  graphene.String(required=True)
        start_longitude =  graphene.Float(required=True)
        start_latitude =  graphene.Float(required=True)
        destination_address =  graphene.String(required=True)
        destination_longitude =  graphene.Float(required=True)
        destination_latitude =  graphene.Float(required=True)

    trip = graphene.Field(Trip)

    @login_required
    def mutate(self, info, **kwargs):
        user_id = return_logged_in_users_id()
        new_trip = TripModel(**kwargs)
        new_trip.host_id = int(user_id)
        new_trip.save()
        return CreateTrip(trip=new_trip)


class EndTrip(graphene.Mutation):
    """
        Mutation to end a trip
    """

    class Arguments:
        trip_id = graphene.Int(required=True)

    trip = graphene.Field(Trip)

    @login_required
    def mutate(self, info, **kwargs):
        query = Trip.get_query(info)
        trip = query.filter(TripModel.id == kwargs['trip_id']).first()
        
        if not trip:
            return GraphQLError("Trip not found!")

        trip.status = "ended"
        trip.save()
        return EndTrip(trip=trip)


class allTrips(graphene.ObjectType):
    """
        Get all trips
    """
    trips = graphene.List(Trip)


class Query(graphene.ObjectType):
    all_trips_by_user = graphene.List(
        Trip,
        description="Returns a list of all trips by a user")

    specific_trip = graphene.Field(
        Trip,
        trip_id=graphene.Int(),
        description="Returns trip details and accepts argument\
            \n- trip_id: A unique identifier of the trip"
    )

    get_user_active_trip = graphene.Field(
      Trip,
      description="Returns an active trip for a specific user"
    )

    @login_required
    def resolve_all_trips_by_user(self, info, **kwargs):
        query = Trip.get_query(info)
        user_id = return_logged_in_users_id()
        
        user_trips = query.filter_by(
          host_id = user_id
        )
        trips = query.all()
        return trips

    @login_required
    def resolve_get_user_active_trip(self, info, **kwargs):
        query = Trip.get_query(info)
        user_id = return_logged_in_users_id()

        user_active_trip = query.filter_by(
          host_id = user_id
        ).filter_by(status = "started").first()
        return user_active_trip



    def resolve_specific_trip(self, info, trip_id):
        query = Trip.get_query(info)
        trip = query.filter(TripModel.id == trip_id).first()

        if not trip:
            raise GraphQLError("Trip not found")

        return trip


class Mutation(graphene.ObjectType):
    """
        Mutation to create a trip
    """
    create_trip = CreateTrip.Field(
        description="Creates a new trip with the arguments\
            \n- estimated_time = estimated_time to reach the destination[required]\
            \n- distance = distance from the host to the destination[required]\
            \n- destination_address = destination address[required]\
            \n- destination_longitude[required]\
            \n- destination_latitude[required]\
            \n- host = trip creator[required]\
            \n- status = status of the trip[required]")
    end_trip = EndTrip.Field(
        description="Ends a trip with the trip_id"
    )
